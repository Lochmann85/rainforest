{% extends 'base.html.twig' %}

{% block title 'Rainforest' %}

{% block stylesheets %}
    <link rel="stylesheet" type="text/css" href="https://www.iamstudent.at/css/iamstudent.css"/>
    <link rel="stylesheet" type="text/css" href="css/styles.css"/>
    <style type="text/css">
        .squareSize {width:{{ map.getSquareWidth }}px;height:{{ map.getSquareHeight }}px;}
        #grid-container {position:relative;left:0px;width:{{ mapEntity.getWidth }}px;top:0px;height:{{ mapEntity.getHeight }}px;}
    </style>
{% endblock %}

{% block body %}
    <div class="container-fluid panel panel-default panel-standalone">
        <div class="row">
            <div class="col-xs-10">
                <h2>{{ mapEntity.getDescription | raw }}</h2>
            </div>
        </div>
        {% if (userId) %}
        <form id="square-finder-form" class="row">
            <fieldset>
                <input type="hidden" name="map-id" value="{{ mapEntity.getId }}"/>
                <input type="hidden" name="user-id" value="{{ userId }}"/>
                <button id="square-finder-submit" type="submit" form="square-finder-form" class="btn btn-lg btn-iams">Finde deinen Baum</button>
            </fieldset>
        </form>
        {% endif %}
        <form id="counter-form" class="row">
            <fieldset>
                <input type="hidden" name="map-id" value="{{ mapEntity.getId }}"/>
                <input type="hidden" name="user-id" value="{{ userId }}"/>
                <div class="col-xs-2">
                    <div class="input-group">
                        <span class="input-group-addon">
                            <i class="fa fa-tree text-jumbo margin-right-half margin-left-half"></i>
                        </span>
                        <input class="form-control" type="text" name="counter" disabled>
                    </div>
                </div>
            </fieldset>
        </form>
        <div class="row">
            <div class="col-xs-12">
                <button id="goLeft" type="button">links</button>
                <button id="goRight" type="button">rechts</button>
                <button id="goUp" type="button">oben</button>
                <button id="goDown" type="button">unten</button>
            </div>
        </div>
        <div id="grid-viewport">
            <div id="grid-container">
                <img id="rainforest" src="{{ mapEntity.getImageUrl }}" width="100%"/>
                <div class="foreground">
                    {{ map.getGridOfSquaresAsDivs | raw }}
                </div>
                <canvas id="grid">Your browser does not support canvas</canvas>
            </div>
        </div>
        <canvas id="marker" width="26px" height="52px"></canvas>
        <div id="square-container">
            <button id="square-close" type="button" class="close">Ã—</button>
            <div id="square-content"></div>
            <div id="square-form-row">
                <div class="row">
                    <div class="col-xs-10">
                        <button id="square-form-submit" type="submit" class="btn btn-iams pull-right">Retten</button>
                    </div>
                </div>
                <div id="square-form-error" class="alert alert-danger"><span></span></div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script type="text/javascript" src="js/jquery.min.js"></script>
    <script type="text/javascript" src="js/bootstrap.min.js"></script>
    <script type="text/javascript">
    /*<![CDATA[*/

    var grid = $('#grid');
    grid[0].width = {{ mapEntity.getWidth }} + 1;
    grid[0].height = {{ mapEntity.getHeight }} + 1;
    var gridContext = grid[0].getContext('2d');
    var gridLineWidth = 1;

    var numberX = {{ mapEntity.getNumberX }},
        diffX = {{ map.getSquareWidth }};
    var numberY = {{ mapEntity.getNumberY }},
        diffY = {{ map.getSquareHeight }};
    
    var squareContainer = $('#square-container');

    fillWithBackground();
    cutOutUsedSquares();
    drawGrid();

    function fillWithBackground() {
        gridContext.clearRect(0, 0, grid[0].width, grid[0].height);
        gridContext.fillStyle = '#aaa';
        gridContext.fillRect(0, 0, grid[0].width, grid[0].height);
    };
    function cutOutUsedSquares() {
        var squares = {{ squares | raw }};

        for (var i = 0; i < squares.length; i = i + 2) {
            cutOutSquare(squares[i] - 1, squares[i + 1] - 1);
        }
    };
    function cutOutSquare(x, y) {
        gridContext.clearRect(x * diffX, y * diffY, diffX, diffY);
    }
    function drawGrid() {
        gridContext.beginPath();
        for (var i = 0; i <= numberY; i++) {
            gridContext.moveTo(0, i * diffY + 0.5);
            gridContext.lineTo(grid[0].width, i * diffY + 0.5);
        }
        for (var i = 0; i <= numberX; i++) {
            gridContext.moveTo(i * diffX + 0.5, 0);
            gridContext.lineTo(i * diffX + 0.5, grid[0].height);
        }
        gridContext.lineWidth = gridLineWidth;
        gridContext.strokeStyle = '#000';
        gridContext.stroke();
    };


    var markerCoord = {X: 0, Y: 0};
    $(".col-base.squareSize").click( function(event) {
        markerCoord = getCoordinatesFrom(this.id);
        if (isNotAt(squareContainer, squareXToPixel(markerCoord['X']), squareYToPixel(markerCoord['Y']))) {
            $.ajax({
                url:"{{ path('_squareContent') }}",
                type:"POST",
                data:{squareSelected: true,
                      mapId: $('#counter-form input[name=map-id]').val(),
                      userId: $('#counter-form input[name=user-id]').val(),
                      coordX: markerCoord['X'],
                      coordY: markerCoord['Y']},
                success:function(data) {
                    $("#square-form-row").removeAttr('style');
                    $("#square-form-row .alert").removeAttr('style');
                    squareContainer.fadeOut('fast');
                    
                    setTimeout(function() {
                        $("#square-content").html(data.message);

                        if (data.userCanBuyThisSquare) {
                            $("#square-form-row").css('display', 'block');
                        }

                        moveMarkerTo(data.coordX, data.coordY);
                        moveSquareContainerTo(data.coordX, data.coordY);
                    }, 200);
                    setTimeout(function() {
                        squareContainer.fadeIn('slow');
                    }, 400);
                }
            });
        }
        else {
            squareContainer.fadeIn('slow');
        }
        event.stopImmediatePropagation();
    });
    function getCoordinatesFrom(squareId) {
        var splitId = squareId.split("-");
        return {X: splitId[1], Y: splitId[0]};
    };
    function isNotAt(object, x, y) {
        var positionLeft = parseInt(object.css('left')),
            positionTop = parseInt(object.css('top'));

        if (Math.abs(positionLeft - x) < 1 && Math.abs(positionTop - y) < 1) {
            return false;
        }
        return true;
    };


    $("#square-finder-submit").click( function(event) {
        $.ajax({
            url:"{{ path('_squareFinder') }}",
            type:"POST",
            data:$("#square-finder-form").serialize(),
            success:function(data) {
                $("#square-form-row").removeAttr('style');
                $("#square-form-row .alert").removeAttr('style');
                if (data.success) {
                    if (isNotAt(squareContainer, squareXToPixel(data.coordX), squareYToPixel(data.coordY))) {
                        squareContainer.fadeOut('fast');
                    }

                    setTimeout(function() {
                        $("#square-content").html(data.message);

                        if (data.userHasBoughtSquare) {
                            gridContainerLeft = find_X_PositionOnWholeMap(data);
                            moveGridContainerToLeft(gridContainerLeft);

                            gridContainerTop = find_Y_PositionOnWholeMap(data);
                            moveGridContainerToTop(gridContainerTop);

                            moveMarkerTo(data.coordX, data.coordY);
                            moveSquareContainerTo(data.coordX, data.coordY);
                        }
                        else {
                            gridContainerLeft = 0;
                            moveGridContainerToLeft(gridContainerLeft);
                            gridContainerTop = 0;
                            moveGridContainerToTop(gridContainerTop);
                            moveSquareContainerTo(2, 2);
                        }
                        $("#square-finder-error > span").html('');
                        $("#square-finder-error").fadeOut('fast');
                    }, 200);
                    
                    setTimeout(function() {
                        squareContainer.fadeIn('slow');
                    }, 400);
                }
                else {
                    $("#square-finder-error > span").html(data.message);
                    $("#square-finder-error").fadeIn('fast');
                }
            }
        });
        event.stopImmediatePropagation();
        event.preventDefault();
    });
    function find_X_PositionOnWholeMap(data) {
        var centerMarker = data.coordX - Math.floor(viewportWidthInSquares / 2);
        if (data.coordX <= gridContainerLeft) {
            return centerMarker > 0 ? centerMarker : 0;
        }
        else if (gridContainerLeft + viewportWidthInSquares <= data.coordX) {
            return centerMarker + viewportWidthInSquares < numberX ? centerMarker : numberX - viewportWidthInSquares;
        }
        else return gridContainerLeft;
    };
    function find_Y_PositionOnWholeMap(data) {
        var centerMarker = data.coordY - Math.floor(viewportHeightInSquares / 2);
        if (data.coordY <= gridContainerTop) {
            return centerMarker > 0 ? centerMarker : 0;
        }
        else if (gridContainerTop + viewportHeightInSquares <= data.coordY) {
            return centerMarker + viewportHeightInSquares < numberY ? centerMarker : numberY - viewportHeightInSquares;
        }
        else return gridContainerTop;
    };


    $('#counter-form input[name=counter]').val("{{ map.getRemainingFreeSquares }} BÃ¤ume");
    $("#square-form-submit").click( function(event){
        $.ajax({
            url: "{{ path('_squareSaver') }}",
            type:"POST",
            data:{squareForm: true,
                  personalText: $('#square-form textarea').val(),
                  mapId: $('#counter-form input[name=map-id]').val(),
                  userId: $('#counter-form input[name=user-id]').val(),
                  coordX: $('#square-form input[name=coordX]').val(),
                  coordY: $('#square-form input[name=coordY]').val()
                  },
            success:function(data) {
                if (data.success) {
                    $("#square-form-row").removeAttr('style');
                    $("#square-form-row .alert").removeAttr('style');
                    $("#square-form").html(data.message);
                    cutOutSquare(data.coordX - 1, data.coordY - 1);
                    drawGrid();
                    moveSquareContainerTo(data.coordX, data.coordY);
                    squareContainer.fadeIn('fast');
                    $.ajax({
                        url: "{{ path('_updateCounter') }}",
                        type:"POST",
                        data:{updateCounter: true,
                              mapId: $('#counter-form input[name=map-id]').val()
                        },
                        success:function(data) {$('#counter-form input[name=counter]').val(data.numberOfRemainingSquares + ' BÃ¤ume');}
                    });
                }
                else {
                    $("#square-form-error > span").html(data.message);
                    $("#square-form-error").fadeIn();
                }
            }
        });
        event.stopImmediatePropagation();
        event.preventDefault();
    });


    $("#square-close").click( function(event) {
        squareContainer.fadeOut('fast');
        event.stopImmediatePropagation();
    });
    /*]]>*/
    </script>
    <script type="text/javascript" src="js/viewport.js"></script>
    <script type="text/javascript" src="js/squareMarkerAndContent.js"></script>
{% endblock %}